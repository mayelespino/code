http://blog.jetbrains.com/pycharm/2014/06/write-clean-professional-maintainable-quality-code-in-python/
================================================================================================================

Python developers to analyse their code against errors and possible perils. These include pyflakes, pylint, pep8, and others. 

PyCharm is one of the most intelligent Python development products on the market today. 


Code Style violations

The very first feature I need to describe is basic code style checking. Python is very sensitive to code formatting by its nature

Simple formatting is not enough! Here come customizable inspections
-verison compatibility

PEP 8 integration

Among a number of different inspections, PyCharm supports the PEP 8 standard by integration of the official pep8.py tool


================================================================================================================
http://www.ibm.com/developerworks/aix/library/au-cleancode/
================================================================================================================

The short answer is: if you don't have tests, you don't know if your software works. If you stack together enough guesses, you may eventually build something that appears to function, but that no human could ever say with certainty ever worked properly. This is a bad place to be.


nd ran it against both code coverage analysis with nose and two static analysis tools, pylint, and pygenie.

TESTS:

import unittest
from highlight import HighlightDocumentOperations

class TestHighlight(unittest.TestCase):
    
    def setUp(self):
        
        self.document = """
Review for their take-out only.
Tried their large Classic (sausage, mushroom, peppers and onions) deep dish;and their large Pesto Chicken thin crust pizzas.
Pizza = I've had better.  The crust/dough was just way too effin' dry for me.Yes, I know what 'cornmeal' is, thanks.  But it's way too dry.I'm not talking about the bottom of the pizza...I'm talking about the dough that's in between the sauce and bottom of the pie...it was like cardboard, sorry!
Wings = spicy and good.   Bleu cheese dressing only...hmmm, but no alternativeof ranch dressing, at all.  Service = friendly enough at the counters.  
Decor = freakin' dark.  I'm not sure how people can see their food.  
Parking = a real pain.  Good luck.        
        
        """
        self.query = "deep+dish+pizza"
        self.hdo = HighlightDocumentOperations(self.document, self.query)
        
    def test_custom_highlight_tag(self):
        
        actual = self.hdo._custom_highlight_tag("foo",
                                            start="[BAR]",
                                            end="[ENDBAR]")
        expected = "[BAR]foo[ENDBAR]"
        self.assertEqual(actual,expected)
    
    def test_query_string_to_dict(self):
        """Verifies the yielded results are what is expected"""
  

================================================================================================================
https://docs.python.org/2/library/unittest.html
================================================================================================================

import unittest

class TestStringMethods(unittest.TestCase):

  def test_upper(self):
      self.assertEqual('foo'.upper(), 'FOO')

  def test_isupper(self):
      self.assertTrue('FOO'.isupper())
      self.assertFalse('Foo'.isupper())

  def test_split(self):
      s = 'hello world'
      self.assertEqual(s.split(), ['hello', 'world'])
      # check that s.split fails when the separator is not a string
      with self.assertRaises(TypeError):
          s.split(2)

if __name__ == '__main__':
    unittest.main()
================================================================================================================
